======android命令行创建应用工程======
=====配置=====
配置PATH路径：
<code bash>
echo "export PATH=~/bin/:$PATH" >> ~/.bashrc
</code>
做几个需要用到命令的链接((这几个是我自己的路径)) 
<code bash>
  ln -s /home/yanchao/source/ti/out/host/linux-x86/bin/adb ~/bin/
  ln -s /home/yanchao/source/ti/out/host/linux-x86/bin/android ~/bin/
  ln -s /home/yanchao/source/ti/out/host/linux-x86/bin/aapt ~/bin/
</code>
看一下**ANDROID_SWT**环境变量是否设置
<code bash>
echo $ANDROID_SWT
</code>
如果没有设置的找到你的swt.jar目录，下面这个是我的设置
<code bash>
export ANDROID_SWT=/home/yanchao/source/ti/out/host/linux-x86/framework
</code>
之后android命令就可以使用了
看一下创建工程的帮助
<code bash>
$ android --help create project

       Usage:
       android [global options] create project [action options]
       Global options:
  -h --help       : Help on a specific command.
  -v --verbose    : Verbose mode, shows errors, warnings and all messages.
     --clear-cache: Clear the SDK Manager repository manifest cache.
  -s --silent     : Silent mode, shows errors only.

                         Action "create project":
  Creates a new Android project.
Options:
  -n --name    : Project name.
  -t --target  : Target ID of the new project. [required]
  -p --path    : The new project's directory. [required]
  -k --package : Android package name for the application. [required]
  -a --activity: Name of the default Activity that is created. [required]
</code>
=====创建过程=====
根据说明，我执行如下命令
<code bash>
android create project -n HelloWorld -t 9 -p HelloWorld -k com.android.helloworld -a HelloWorld
</code>
执行的结果很不令人满意
<code bash>
Error: Target id is not valid. Use 'android list targets' to get the target ids
</code>
根据提示执行''android list targets''发现没有targets，那就只能自己创建一个啦
<code bash>
android create avd --target 1 --name my_avd
</code>
又一次失败了
<code>
Error: Target id is not valid. Use 'android list targets' to get the target ids.
</code>
于是我在一篇[[http://blog.csdn.net/muwesky/article/details/6526516 |博客]]上找到了这么一段话
<code>
Running android list targets listed no available targets. 
This is because the SDK needs some further set-up work to tell it to fetch sources before you can use it.

To get around this problem type android in your terminal. 
Then click Available sources > check the box and click install selected. 
It will then go off and download all of the SDK packages via an https repository server at google.com/android. 
</code>
那就直接在命令行执行android吧！郁闷的是又失败了
<code>
$ android
Exception in thread "main" java.lang.UnsatisfiedLinkError: Cannot load 32-bit SWT libraries on 64-bit JVM
	at org.eclipse.swt.internal.Library.loadLibrary(Unknown Source)
	at org.eclipse.swt.internal.Library.loadLibrary(Unknown Source)
	at org.eclipse.swt.internal.C.<clinit>(Unknown Source)
	at org.eclipse.swt.internal.Converter.wcsToMbcs(Unknown Source)
	at org.eclipse.swt.internal.Converter.wcsToMbcs(Unknown Source)
	at org.eclipse.swt.widgets.Display.<clinit>(Unknown Source)
	at com.android.sdkmanager.Main.showSdkManagerWindow(Main.java:330)
	at com.android.sdkmanager.Main.doAction(Main.java:318)
	at com.android.sdkmanager.Main.run(Main.java:118)
	at com.android.sdkmanager.Main.main(Main.java:101)
</code>
那我就换一个swt.jar试试，正巧我之前编译firefox os的时候那边有一个swt.jar，把ANDROID_SWT的路径换到64位的那个。再执行android结果是一样的，跟没有换一样。 \\
郁闷啊，再搜索，终于发现有一个[[http://blog.chinaunix.net/uid-24856020-id-3406761.html|博客]]说可能是路径的问题，打开android这个文件<sub>脚本</sub>，最后面
<code bash>
exec "$java_cmd" \
    -Xmx256M $os_opts $java_debug \
    -Dcom.android.sdkmanager.toolsdir="$progdir" \
    -classpath "$jarpath:$swtpath/swt.jar" \
    com.android.sdkmanager.Main "$@"
</code>
注意这个jarpath在swtpath之前，我找到jarpath的定义
<code bash>
if [ "$OSTYPE" = "cygwin" ] ; then
    jarpath=`cygpath -w  "$frameworkdir/$jarfile"`
    jarpath="$jarpath;"`cygpath -w  "$frameworkdir/swtmenubar.jar"`
    progdir=`cygpath -w  "$progdir"`
else
    jarpath="$frameworkdir/$jarfile:$frameworkdir/swtmenubar.jar"
fi
</code>
找到android命令的位置到它上一级的framework目录真的找到了一个swt.jar，把它重命令一下。 \\
android果然可以执行了,弹出的界面提示下载SDK，无聊的等待呀。
<note tip>可选的SDK有很多个，选择要用的就行了，然后把system image之类的去掉，还有mips x86相关的。这些文件都特别的大，太耗时间，关键是还没有用。只需要装SDK paltform EABI(arm的)就行了</note>
====创建一个TARGET====
问题都解决了，真正的创建过程开始，以后再创建工程就从这里开始,先看看都装了哪些SDK版本，
<code bash>
$ android list targets
Available Android targets:
----------
id: 1 or "android-16"
     Name: Android 4.1.2
     Type: Platform
     API level: 16
     Revision: 4
     Skins: WXGA800-7in, HVGA, WVGA800 (default), WVGA854, WSVGA, WXGA720, WQVGA400, WQVGA432, QVGA, WXGA800
     ABIs : armeabi-v7a
</code>
我只装了4.1版本的SDK，所以target仅能选1了。下面创建一个设备
<code bash>
$ android create avd -n my_avd -t 1
Auto-selecting single ABI armeabi-v7a
Android 4.1.2 is a basic Android platform.
Do you wish to create a custom hardware profile [no]y

Name of the AVD being run: 
avd.name [<build>]:  

Cache partition support: Whether we use a /cache partition on the device.
disk.cachePartition [yes]:

Cache partition: Cache partition to use on the device. Ignored if disk.cachePartition is not 'yes'.
disk.cachePartition.path []:yes

Cache partition: Cache partition to use on the device. Ignored if disk.cachePartition is not 'yes'.
disk.cachePartition.path []:

Cache partition size: 
disk.cachePartition.size [66MB]:

Initial data partition: If not empty, its content will be copied to the disk.dataPartition.path file at boot-time.
disk.dataPartition.initPath []:

Path to data partition file: Path to data partition file. Cannot be empty. Special value <temp> means using a temporary file. If disk.dataPartition.initPath is not empty, its content will be copied to the disk.dataPartition.path file at boot-time.
disk.dataPartition.path [<temp>]:

Ideal size of data partition: 
disk.dataPartition.size [0]:

Path to the ramdisk image: Path to the ramdisk image.
disk.ramdisk.path []:

Path to snapshot storage: Path to a 'snapshot storage' file, where all snapshots are stored.
disk.snapStorage.path []:

Initial system partition image: 
disk.systemPartition.initPath []:

Path to runtime system partition image: 
disk.systemPartition.path []:

Ideal size of system partition: 
disk.systemPartition.size [0]:

Accelerometer: Whether there is an accelerometer in the device.
hw.accelerometer [yes]:

Audio recording support: Whether the device can record audio
hw.audioInput [yes]:

Audio playback support: Whether the device can play audio
hw.audioOutput [yes]:

Battery support: Whether the device can run on a battery.
hw.battery [yes]:

Configures camera facing back: Must be 'emulated' for a fake camera, 'webcam<N>' for a web camera, or 'none' if back camera is disabled.
hw.camera.back [emulated]:

Configures camera facing front: Must be 'emulated' for a fake camera, 'webcam<N>' for a web camera, or 'none' if front camera is disabled.
hw.camera.front [none]:

CPU Architecture: The CPU Architecture to emulator
hw.cpu.arch [arm]:

CPU model: The CPU model (QEMU-specific string)
hw.cpu.model []:

DPad support: Whether the device has DPad keys
hw.dPad [yes]:

GPS support: Whether there is a GPS in the device.
hw.gps [yes]:

GPU emulation: Enable/Disable emulated OpenGLES GPU
hw.gpu.enabled [no]:

GSM modem support: Whether there is a GSM modem in the device.
hw.gsmModem [yes]:

Keyboard support: Whether the device has a QWERTY keyboard.
hw.keyboard [no]:

Keyboard charmap name: Name of the system keyboard charmap file.
hw.keyboard.charmap [qwerty2]:

Keyboard lid support: Whether the QWERTY keyboard can be opened/closed.
hw.keyboard.lid [yes]:

LCD backlight: Enable/Disable LCD backlight simulation,yes-enabled,no-disabled.
hw.lcd.backlight [yes]:

Abstracted LCD density: A value used to roughly describe the density of the LCD screen for automatic resource/asset selection.
hw.lcd.density [160]:

LCD color depth: Color bit depth of emulated framebuffer.
hw.lcd.depth [16]:

LCD pixel height: 
hw.lcd.height [640]:

LCD pixel width: 
hw.lcd.width [320]:

Hardware Back/Home keys: Whether there are hardware back/home keys on the device.
hw.mainKeys [yes]:

Device ram size: The amount of physical RAM on the device, in megabytes.
hw.ramSize [0]:

Touch screen type: Defines type of the screen.
hw.screen [touch]:

SD Card support: Whether the device supports insertion/removal of virtual SD Cards.
hw.sdCard [yes]:

SD Card image path: 
hw.sdCard.path []:

Magnetic field support: Provides magnetic field sensor values.
hw.sensors.magnetic_field [yes]:

Orientation support: Provides orientation sensor values.
hw.sensors.orientation [yes]:

Proximity support: Whether there is an proximity in the device.
hw.sensors.proximity [yes]:

Temperature support: Provides temperature sensor values.
hw.sensors.temperature [yes]:

Track-ball support: Whether there is a trackball on the device.
hw.trackBall [yes]:

kernel boot parameters string.: 
kernel.parameters []:

Path to the kernel image: Path to the kernel image.
kernel.path []:

Max VM application heap size: The maximum heap size a Dalvik application might allocate before being killed by the system. Value is in megabytes.
vm.heapSize [0]:


Created AVD 'my_avd' based on Android 4.1.2, ARM (armeabi-v7a) processor,
with the following hardware config:
hw.lcd.density=240
vm.heapSize=48
hw.ramSize=512
</code>
除了第一项我选择了y，之后就是一路空格，因为我只想它建一个工程就行了，其它的我也不需要是吧。
现在创建工程吧！
<code bash>
$ android create project -n HelloWorld -t 1 -p HelloWorld -k com.android.helloworld -a HelloWorld
Created directory /home/yanchao/source/mstar/mstar-lite/packages/apps/HelloWorld/src/com/android/helloworld
Added file HelloWorld/src/com/android/helloworld/HelloWorld.java
Created directory /home/yanchao/source/mstar/mstar-lite/packages/apps/HelloWorld/res
Created directory /home/yanchao/source/mstar/mstar-lite/packages/apps/HelloWorld/bin
Created directory /home/yanchao/source/mstar/mstar-lite/packages/apps/HelloWorld/libs
Created directory /home/yanchao/source/mstar/mstar-lite/packages/apps/HelloWorld/res/values
Added file HelloWorld/res/values/strings.xml
Created directory /home/yanchao/source/mstar/mstar-lite/packages/apps/HelloWorld/res/layout
Added file HelloWorld/res/layout/main.xml
Created directory /home/yanchao/source/mstar/mstar-lite/packages/apps/HelloWorld/res/drawable-xhdpi
Created directory /home/yanchao/source/mstar/mstar-lite/packages/apps/HelloWorld/res/drawable-hdpi
Created directory /home/yanchao/source/mstar/mstar-lite/packages/apps/HelloWorld/res/drawable-mdpi
Created directory /home/yanchao/source/mstar/mstar-lite/packages/apps/HelloWorld/res/drawable-ldpi
Added file HelloWorld/AndroidManifest.xml
Added file HelloWorld/build.xml
Added file HelloWorld/proguard-project.txt
</code>
=====编译=====
工程创建完成编译就简单了，便是如果现在编译还不行会出现如下错误：
<code make>
Warning: AndroidManifest.xml already defines versionName (in http://schemas.android.com/apk/res/android); using existing value in manifest.
packages/apps/HelloWorld/res/layout/main.xml:7: error: Error: This attribute must be localized. (at 'text' with value 'Hello World, HelloWorld').
make: *** [out/target/common/obj/APPS/HelloWorld_intermediates/src/R.stamp] Error 1
</code>
这是因为res/layout/main.xml只直接使用文字没有国际化，修改一下就行，在res/values/strings.xml添加一项并且在main中以"@string/key"要可以了。
现在执行
<code bash>
source build/envsetup.sh
lunch 4
mmm packages/app/HelloWorld

 >target Dex: HelloWorld
 >Copying: out/target/common/obj/APPS/HelloWorld_intermediates/proguard.classes.dex
 >target Package: HelloWorld (out/target/product/xxx/obj/APPS/HelloWorld_intermediates/package.apk)
 >Warning: AndroidManifest.xml already defines versionCode (in http://schemas.android.com/apk/res/android);      
 >using existing value in manifest.
 >Warning: AndroidManifest.xml already defines versionName (in http://schemas.android.com/apk/res/android);  >using existing value in manifest.
 >'out/target/common/obj/APPS/HelloWorld_intermediates/classes.dex' as 'classes.dex'...
 >Install: out/target/product/xxx/system/app/HelloWorld.apk

</code>
=====添加一个服务=====
现在可以添加一个简单的服务了。 \\
首先修改AndroidManifest.xml,在</activity>后另起一行添加
<code make>
<service android:name=".LocalService">
      <intent-filter>
            <action android:name="com.android.helloworld.localservice" />
            <category android:name="android.intent.category.default" />
       </intent-filter>
</service>
</code>
然后在src/android/helloworld/下加入一个文件LocalService.java,文件内容是
<code java>
package com.android.helloworld;

import android.content.Context;
import android.content.Intent;
import android.app.Service;
import android.os.Bundle;
import android.os.Binder;
import android.os.IBinder;
import android.util.Log;

public class LocalService extends Service {

        private static final String TAG = "yanchao";

        @Override
        public IBinder onBind(Intent intent) {
                Log.i(TAG, "onBind");
                return null;
        }

        @Override
        public void onCreate() {
                Log.i(TAG, "onCreate");
                super.onCreate();
        }

        @Override
        public void onDestroy() {
                Log.i(TAG, "onDestroy");
                super.onDestroy();
        }

        @Override
        public void onStart(Intent intent, int startId) {
                Log.i(TAG, "onStart");
                super.onStart(intent, startId);
        }
}
</code>
这个服务非常的简单，只实现了几个必须的函数，第一次启动的时候会调用onCreate和onStart，以后再调用startService就只调用onStart了。
另外一个文件HelloWorld.java也需要修改，改之后的结果是这样的：
<code java>
package com.android.helloworld;

import android.app.Activity;
import android.os.Bundle;
import android.util.Log;
import android.content.Intent;

public class HelloWorld extends Activity
{
    private static final String TAG="demo";
    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        startService(new Intent("com.android.helloworld.localservice"));
        Log.d(TAG,"just a notify.");
    }
}
</code>
这样就完成了，adb intall HelloWorld.apk试试看.